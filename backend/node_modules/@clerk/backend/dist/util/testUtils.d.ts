/// <reference types="qunit" />
type ApiResponse<T> = {
    data: T | null;
    errors: null | any[];
};
type SuccessApiResponse<T> = {
    data: T;
    errors: null;
};
type ErrorApiResponse = {
    data: null;
    errors: any[];
    clerkTraceId: string;
    status: number;
    statusText: string;
};
export declare function assertResponse<T>(assert: Assert, resp: ApiResponse<T>): asserts resp is SuccessApiResponse<T>;
export declare function assertErrorResponse<T>(assert: Assert, resp: ApiResponse<T>): asserts resp is ErrorApiResponse;
export declare function jsonOk(body: unknown, status?: number): Promise<{
    ok: boolean;
    status: number;
    statusText: string;
    headers: {
        get: (key: string) => "application/json" | "mock_cf_ray" | null;
    };
    json(): Promise<unknown>;
}>;
export declare function jsonPaginatedOk(body: unknown[], total_count: number, status?: number): Promise<{
    ok: boolean;
    status: number;
    statusText: string;
    headers: {
        get: (key: string) => "application/json" | "mock_cf_ray" | null;
    };
    json(): Promise<{
        data: unknown[];
        total_count: number;
    }>;
}>;
export declare function jsonNotOk(body: unknown): Promise<{
    ok: boolean;
    status: number;
    statusText: number;
    headers: {
        get: (key: string) => "application/json" | "mock_cf_ray" | null;
    };
    json(): Promise<unknown>;
}>;
export declare function jsonError(body: unknown, status?: number): Promise<{
    ok: boolean;
    status: number;
    statusText: string;
    headers: {
        get: (key: string) => "application/json" | "mock_cf_ray" | null;
    };
    json(): Promise<unknown>;
}>;
export declare function assertOk<T = string>(assert: Assert, data: unknown): asserts data is T;
export {};
//# sourceMappingURL=testUtils.d.ts.map