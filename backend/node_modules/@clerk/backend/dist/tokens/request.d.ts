import type { MatchFunction } from '@clerk/shared/pathToRegexp';
import type { RequestState } from './authStatus';
import type { AuthenticateRequestOptions, OrganizationSyncOptions } from './types';
export declare const RefreshTokenErrorReason: {
    readonly NonEligibleNoCookie: "non-eligible-no-refresh-cookie";
    readonly NonEligibleNonGet: "non-eligible-non-get";
    readonly InvalidSessionToken: "invalid-session-token";
    readonly MissingApiClient: "missing-api-client";
    readonly MissingSessionToken: "missing-session-token";
    readonly MissingRefreshToken: "missing-refresh-token";
    readonly ExpiredSessionTokenDecodeFailed: "expired-session-token-decode-failed";
    readonly ExpiredSessionTokenMissingSidClaim: "expired-session-token-missing-sid-claim";
    readonly FetchError: "fetch-error";
    readonly UnexpectedSDKError: "unexpected-sdk-error";
};
export declare function authenticateRequest(request: Request, options: AuthenticateRequestOptions): Promise<RequestState>;
/**
 * @internal
 */
export declare const debugRequestState: (params: RequestState) => {
    isSignedIn: boolean;
    proxyUrl: string | undefined;
    reason: string | null;
    message: string | null;
    publishableKey: string;
    isSatellite: boolean;
    domain: string;
};
type OrganizationSyncTargetMatchers = {
    OrganizationMatcher: MatchFunction<Partial<Record<string, string | string[]>>> | null;
    PersonalAccountMatcher: MatchFunction<Partial<Record<string, string | string[]>>> | null;
};
/**
 * Computes regex-based matchers from the given organization sync options.
 */
export declare function computeOrganizationSyncTargetMatchers(options: OrganizationSyncOptions | undefined): OrganizationSyncTargetMatchers;
/**
 * Determines if the given URL and settings indicate a desire to activate a specific
 * organization or personal account.
 *
 * @param url - The URL of the original request.
 * @param options - The organization sync options.
 * @param matchers - The matchers for the organization and personal account patterns, as generated by `computeOrganizationSyncTargetMatchers`.
 */
export declare function getOrganizationSyncTarget(url: URL, options: OrganizationSyncOptions | undefined, matchers: OrganizationSyncTargetMatchers): OrganizationSyncTarget | null;
/**
 * Represents an organization or a personal account - e.g. an
 * entity that can be activated by the handshake API.
 */
export type OrganizationSyncTarget = {
    type: 'personalAccount';
} | {
    type: 'organization';
    organizationId?: string;
    organizationSlug?: string;
};
export {};
//# sourceMappingURL=request.d.ts.map