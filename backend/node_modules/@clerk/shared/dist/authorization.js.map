{"version":3,"sources":["../src/authorization.ts"],"sourcesContent":["import type {\n  __experimental_ReverificationConfig,\n  __experimental_SessionVerificationLevel,\n  __experimental_SessionVerificationTypes,\n  CheckAuthorizationWithCustomPermissions,\n  OrganizationCustomPermissionKey,\n  OrganizationCustomRoleKey,\n} from '@clerk/types';\n\ntype TypesToConfig = Record<\n  __experimental_SessionVerificationTypes,\n  Exclude<__experimental_ReverificationConfig, __experimental_SessionVerificationTypes>\n>;\ntype AuthorizationOptions = {\n  userId: string | null | undefined;\n  orgId: string | null | undefined;\n  orgRole: string | null | undefined;\n  orgPermissions: string[] | null | undefined;\n  __experimental_factorVerificationAge: [number, number] | null;\n};\n\ntype CheckOrgAuthorization = (\n  params: { role?: OrganizationCustomRoleKey; permission?: OrganizationCustomPermissionKey },\n  { orgId, orgRole, orgPermissions }: AuthorizationOptions,\n) => boolean | null;\n\ntype CheckStepUpAuthorization = (\n  params: {\n    __experimental_reverification?: __experimental_ReverificationConfig;\n  },\n  { __experimental_factorVerificationAge }: AuthorizationOptions,\n) => boolean | null;\n\nconst TYPES_TO_OBJECTS: TypesToConfig = {\n  veryStrict: {\n    afterMinutes: 10,\n    level: 'multiFactor',\n  },\n  strict: {\n    afterMinutes: 10,\n    level: 'secondFactor',\n  },\n  moderate: {\n    afterMinutes: 60,\n    level: 'secondFactor',\n  },\n  lax: {\n    afterMinutes: 1_440,\n    level: 'secondFactor',\n  },\n};\n\nconst ALLOWED_LEVELS = new Set<__experimental_SessionVerificationLevel>(['firstFactor', 'secondFactor', 'multiFactor']);\n\nconst ALLOWED_TYPES = new Set<__experimental_SessionVerificationTypes>(['veryStrict', 'strict', 'moderate', 'lax']);\n\n// Helper functions\nconst isValidMaxAge = (maxAge: any) => typeof maxAge === 'number' && maxAge > 0;\nconst isValidLevel = (level: any) => ALLOWED_LEVELS.has(level);\nconst isValidVerificationType = (type: any) => ALLOWED_TYPES.has(type);\n\n/**\n * Checks if a user has the required organization-level authorization.\n * Verifies if the user has the specified role or permission within their organization.\n * @returns null, if unable to determine due to missing data or unspecified role/permission.\n */\nconst checkOrgAuthorization: CheckOrgAuthorization = (params, options) => {\n  const { orgId, orgRole, orgPermissions } = options;\n  if (!params.role && !params.permission) {\n    return null;\n  }\n  if (!orgId || !orgRole || !orgPermissions) {\n    return null;\n  }\n\n  if (params.permission) {\n    return orgPermissions.includes(params.permission);\n  }\n  if (params.role) {\n    return orgRole === params.role;\n  }\n  return null;\n};\n\nconst validateReverificationConfig = (config: __experimental_ReverificationConfig | undefined) => {\n  const convertConfigToObject = (config: __experimental_ReverificationConfig) => {\n    if (typeof config === 'string') {\n      return TYPES_TO_OBJECTS[config];\n    }\n    return config;\n  };\n\n  if (typeof config === 'string' && isValidVerificationType(config)) {\n    return convertConfigToObject.bind(null, config);\n  }\n\n  if (typeof config === 'object' && isValidLevel(config.level) && isValidMaxAge(config.afterMinutes)) {\n    return convertConfigToObject.bind(null, config);\n  }\n\n  return false;\n};\n\n/**\n * Evaluates if the user meets step-up authentication requirements.\n * Compares the user's factor verification ages against the specified maxAge.\n * Handles different verification levels (first factor, second factor, multi-factor).\n * @returns null, if requirements or verification data are missing.\n */\nconst checkStepUpAuthorization: CheckStepUpAuthorization = (params, { __experimental_factorVerificationAge }) => {\n  if (!params.__experimental_reverification || !__experimental_factorVerificationAge) {\n    return null;\n  }\n\n  const isValidReverification = validateReverificationConfig(params.__experimental_reverification);\n  if (!isValidReverification) {\n    return null;\n  }\n\n  const { level, afterMinutes } = isValidReverification();\n  const [factor1Age, factor2Age] = __experimental_factorVerificationAge;\n\n  // -1 indicates the factor group (1fa,2fa) is not enabled\n  // -1 for 1fa is not a valid scenario, but we need to make sure we handle it properly\n  const isValidFactor1 = factor1Age !== -1 ? afterMinutes > factor1Age : null;\n  const isValidFactor2 = factor2Age !== -1 ? afterMinutes > factor2Age : null;\n\n  switch (level) {\n    case 'firstFactor':\n      return isValidFactor1;\n    case 'secondFactor':\n      return factor2Age !== -1 ? isValidFactor2 : isValidFactor1;\n    case 'multiFactor':\n      return factor2Age === -1 ? isValidFactor1 : isValidFactor1 && isValidFactor2;\n  }\n};\n\n/**\n * Creates a function for comprehensive user authorization checks.\n * Combines organization-level and step-up authentication checks.\n * The returned function authorizes if both checks pass, or if at least one passes\n * when the other is indeterminate. Fails if userId is missing.\n */\nexport const createCheckAuthorization = (options: AuthorizationOptions): CheckAuthorizationWithCustomPermissions => {\n  return (params): boolean => {\n    if (!options.userId) {\n      return false;\n    }\n\n    const orgAuthorization = checkOrgAuthorization(params, options);\n    const stepUpAuthorization = checkStepUpAuthorization(params, options);\n\n    if ([orgAuthorization, stepUpAuthorization].some(a => a === null)) {\n      return [orgAuthorization, stepUpAuthorization].some(a => a === true);\n    }\n\n    return [orgAuthorization, stepUpAuthorization].every(a => a === true);\n  };\n};\n"],"mappings":"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","names":["config"]}