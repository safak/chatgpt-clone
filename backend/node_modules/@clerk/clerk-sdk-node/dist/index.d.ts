import { AuthObject, createClerkClient as createClerkClient$1, ClerkOptions, verifyToken } from '@clerk/backend';
export * from '@clerk/backend';
import { SignedInAuthObject, AuthenticateRequestOptions } from '@clerk/backend/internal';
import { MultiDomainAndOrProxy } from '@clerk/types';
import { Request, Response, NextFunction } from 'express';

type MiddlewareWithAuthProp = (req: Request, res: Response, next: NextFunction) => Promise<void>;
type MiddlewareRequireAuthProp = (req: Request, res: Response, next: NextFunction) => Promise<void>;
type LooseAuthProp = {
    auth: AuthObject;
};
type StrictAuthProp = {
    auth: SignedInAuthObject;
};
type WithAuthProp<T> = T & LooseAuthProp;
type RequireAuthProp<T> = T & StrictAuthProp;
type ClerkMiddleware = MiddlewareWithAuthProp | MiddlewareRequireAuthProp;
type ClerkMiddlewareOptions = {
    onError?: (error: any) => unknown;
    authorizedParties?: string[];
    audience?: AuthenticateRequestOptions['audience'];
    jwtKey?: string;
    strict?: boolean;
    signInUrl?: string;
} & MultiDomainAndOrProxy;

type CreateClerkExpressMiddlewareOptions = {
    clerkClient: ReturnType<typeof createClerkClient$1>;
    secretKey?: string;
    publishableKey?: string;
    apiUrl?: string;
};
declare const createClerkExpressRequireAuth: (createOpts: CreateClerkExpressMiddlewareOptions) => (options?: ClerkMiddlewareOptions) => MiddlewareRequireAuthProp;

declare const createClerkExpressWithAuth: (createOpts: CreateClerkExpressMiddlewareOptions) => (options?: ClerkMiddlewareOptions) => MiddlewareWithAuthProp;

type MakeOptionalSecondArgument<T> = T extends (a: string, b: infer U) => infer R ? (a: string, b?: U) => R : never;
type VerifyTokenWithOptionalSecondArgument = MakeOptionalSecondArgument<typeof verifyToken>;
type ClerkClient = ReturnType<typeof createClerkClient$1> & {
    expressWithAuth: ReturnType<typeof createClerkExpressWithAuth>;
    expressRequireAuth: ReturnType<typeof createClerkExpressRequireAuth>;
    verifyToken: VerifyTokenWithOptionalSecondArgument;
};
/**
 * This needs to be a *named* function in order to support the older
 * new Clerk() syntax for v4 compatibility.
 * Arrow functions can never be called with the new keyword because they do not have the [[Construct]] method
 */
declare function createClerkClient(options: ClerkOptions): ClerkClient;
declare const clerkClient: ClerkClient;
/**
 * Stand-alone express middlewares bound to the pre-initialised clerkClient
 */
declare const ClerkExpressRequireAuth: (options?: ClerkMiddlewareOptions | undefined) => MiddlewareRequireAuthProp;
declare const ClerkExpressWithAuth: (options?: ClerkMiddlewareOptions | undefined) => MiddlewareWithAuthProp;

type ExpressApiHandlerRequireAuth<T = any> = (req: RequireAuthProp<Request>, res: Response<T>) => void | Promise<void>;
declare function requireAuth(handler: ExpressApiHandlerRequireAuth, options?: ClerkMiddlewareOptions): any;

type ApiHandlerWithAuth<TRequest, TResponse> = (req: WithAuthProp<TRequest>, res: TResponse) => void | Promise<void>;
declare function withAuth<TRequest extends Request = Request, TResponse extends Response = Response>(handler: ApiHandlerWithAuth<TRequest, TResponse>, options?: ClerkMiddlewareOptions): any;

export { ClerkExpressRequireAuth, ClerkExpressWithAuth, type ClerkMiddleware, type ClerkMiddlewareOptions, type LooseAuthProp, type RequireAuthProp, type StrictAuthProp, type WithAuthProp, clerkClient, createClerkClient, createClerkExpressRequireAuth, createClerkExpressWithAuth, requireAuth, withAuth };
