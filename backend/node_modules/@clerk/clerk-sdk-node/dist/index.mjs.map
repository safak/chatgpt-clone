{"version":3,"sources":["../src/clerkClient.ts","../src/authenticateRequest.ts","../src/utils.ts","../src/clerkExpressRequireAuth.ts","../src/clerkExpressWithAuth.ts","../src/index.ts","../src/requireAuth.ts","../src/withAuth.ts"],"sourcesContent":["import type { ClerkOptions, VerifyTokenOptions } from '@clerk/backend';\nimport { createClerkClient as _createClerkClient, verifyToken as _verifyToken } from '@clerk/backend';\n\nimport { createClerkExpressRequireAuth } from './clerkExpressRequireAuth';\nimport { createClerkExpressWithAuth } from './clerkExpressWithAuth';\nimport { loadApiEnv, loadClientEnv } from './utils';\n\ntype MakeOptionalSecondArgument<T> = T extends (a: string, b: infer U) => infer R ? (a: string, b?: U) => R : never;\ntype VerifyTokenWithOptionalSecondArgument = MakeOptionalSecondArgument<typeof _verifyToken>;\n\ntype ClerkClient = ReturnType<typeof _createClerkClient> & {\n  expressWithAuth: ReturnType<typeof createClerkExpressWithAuth>;\n  expressRequireAuth: ReturnType<typeof createClerkExpressRequireAuth>;\n  verifyToken: VerifyTokenWithOptionalSecondArgument;\n};\n\nconst buildVerifyToken = (params: VerifyTokenOptions) => {\n  return (...args: Parameters<VerifyTokenWithOptionalSecondArgument>) =>\n    _verifyToken(args[0], {\n      ...params,\n      ...args[1],\n    });\n};\n\n/**\n * This needs to be a *named* function in order to support the older\n * new Clerk() syntax for v4 compatibility.\n * Arrow functions can never be called with the new keyword because they do not have the [[Construct]] method\n */\nexport function createClerkClient(options: ClerkOptions): ClerkClient {\n  const clerkClient = _createClerkClient(options);\n  const expressWithAuth = createClerkExpressWithAuth({ ...options, clerkClient });\n  const expressRequireAuth = createClerkExpressRequireAuth({ ...options, clerkClient });\n\n  return Object.assign(clerkClient, {\n    expressWithAuth,\n    expressRequireAuth,\n    verifyToken: buildVerifyToken(options),\n  });\n}\n\nlet clerkClientSingleton = {} as unknown as ReturnType<typeof createClerkClient>;\n\nexport const clerkClient = new Proxy(clerkClientSingleton, {\n  get(_target, property: string) {\n    const hasBeenInitialised = !!clerkClientSingleton.authenticateRequest;\n    if (hasBeenInitialised) {\n      // @ts-expect-error - Element implicitly has an 'any' type because expression of type 'string | symbol' can't be used to index type 'ExtendedClerk'.\n      return clerkClientSingleton[property];\n    }\n\n    const env = { ...loadApiEnv(), ...loadClientEnv() };\n    if (env.secretKey) {\n      clerkClientSingleton = createClerkClient({ ...env, userAgent: `${PACKAGE_NAME}@${PACKAGE_VERSION}` });\n      // @ts-expect-error - Element implicitly has an 'any' type because expression of type 'string | symbol' can't be used to index type 'ExtendedClerk'.\n      return clerkClientSingleton[property];\n    }\n\n    const c = createClerkClient({ ...env, userAgent: `${PACKAGE_NAME}@${PACKAGE_VERSION}` });\n    // @ts-expect-error - Element implicitly has an 'any' type because expression of type 'string | symbol' can't be used to index type 'ExtendedClerk'.\n    return c[property];\n  },\n  set() {\n    return false;\n  },\n});\n\n/**\n * Stand-alone express middlewares bound to the pre-initialised clerkClient\n */\nexport const ClerkExpressRequireAuth = (...args: Parameters<ReturnType<typeof createClerkExpressRequireAuth>>) => {\n  const env = { ...loadApiEnv(), ...loadClientEnv() };\n  const fn = createClerkExpressRequireAuth({ clerkClient, ...env });\n  return fn(...args);\n};\n\nexport const ClerkExpressWithAuth = (...args: Parameters<ReturnType<typeof createClerkExpressWithAuth>>) => {\n  const env = { ...loadApiEnv(), ...loadClientEnv() };\n  const fn = createClerkExpressWithAuth({ clerkClient, ...env });\n  return fn(...args);\n};\n","import type { RequestState } from '@clerk/backend/internal';\nimport { AuthStatus, createClerkRequest } from '@clerk/backend/internal';\nimport { handleValueOrFn } from '@clerk/shared/handleValueOrFn';\nimport { isDevelopmentFromSecretKey } from '@clerk/shared/keys';\nimport { isHttpOrHttps, isProxyUrlRelative, isValidProxyUrl } from '@clerk/shared/proxy';\nimport type { Response } from 'express';\nimport type { IncomingMessage } from 'http';\n\nimport type { AuthenticateRequestParams } from './types';\nimport { loadApiEnv, loadClientEnv } from './utils';\n\nexport const authenticateRequest = (opts: AuthenticateRequestParams) => {\n  const { clerkClient, secretKey, publishableKey, req: incomingMessage, options } = opts;\n  const { jwtKey, authorizedParties, audience } = options || {};\n\n  const clerkRequest = createClerkRequest(incomingMessageToRequest(incomingMessage));\n  const env = { ...loadApiEnv(), ...loadClientEnv() };\n  const isSatellite = handleValueOrFn(options?.isSatellite, clerkRequest.clerkUrl, env.isSatellite);\n  const domain = handleValueOrFn(options?.domain, clerkRequest.clerkUrl) || env.domain;\n  const signInUrl = options?.signInUrl || env.signInUrl;\n  const proxyUrl = absoluteProxyUrl(\n    handleValueOrFn(options?.proxyUrl, clerkRequest.clerkUrl, env.proxyUrl),\n    clerkRequest.clerkUrl.toString(),\n  );\n\n  if (isSatellite && !proxyUrl && !domain) {\n    throw new Error(satelliteAndMissingProxyUrlAndDomain);\n  }\n\n  if (isSatellite && !isHttpOrHttps(signInUrl) && isDevelopmentFromSecretKey(secretKey || '')) {\n    throw new Error(satelliteAndMissingSignInUrl);\n  }\n\n  return clerkClient.authenticateRequest(clerkRequest, {\n    audience,\n    secretKey,\n    publishableKey,\n    jwtKey,\n    authorizedParties,\n    proxyUrl,\n    isSatellite,\n    domain,\n    signInUrl,\n  });\n};\n\nconst incomingMessageToRequest = (req: IncomingMessage): Request => {\n  const headers = Object.keys(req.headers).reduce((acc, key) => Object.assign(acc, { [key]: req?.headers[key] }), {});\n  // @ts-ignore Optimistic attempt to get the protocol in case\n  // req extends IncomingMessage in a useful way. No guarantee\n  // it'll work.\n  const protocol = req.connection?.encrypted ? 'https' : 'http';\n  let dummyOriginReqUrl: URL;\n\n  try {\n    dummyOriginReqUrl = new URL(req.url || '', `${protocol}://clerk-dummy`);\n  } catch (e) {\n    throw new Error(`Invalid request URL: ${req.url}`);\n  }\n\n  return new Request(dummyOriginReqUrl, {\n    method: req.method,\n    headers: new Headers(headers),\n  });\n};\n\nexport const setResponseHeaders = (requestState: RequestState, res: Response): Error | undefined => {\n  if (requestState.headers) {\n    requestState.headers.forEach((value, key) => res.appendHeader(key, value));\n  }\n  return setResponseForHandshake(requestState, res);\n};\n\n/**\n * Depending on the auth state of the request, handles applying redirects and validating that a handshake state was properly handled.\n *\n * Returns an error if state is handshake without a redirect, otherwise returns undefined. res.writableEnded should be checked after this method is called.\n */\nconst setResponseForHandshake = (requestState: RequestState, res: Response): Error | undefined => {\n  const hasLocationHeader = requestState.headers.get('location');\n  if (hasLocationHeader) {\n    // triggering a handshake redirect\n    res.status(307).end();\n    return;\n  }\n\n  if (requestState.status === AuthStatus.Handshake) {\n    return new Error('Clerk: unexpected handshake without redirect');\n  }\n\n  return;\n};\n\nconst absoluteProxyUrl = (relativeOrAbsoluteUrl: string, baseUrl: string): string => {\n  if (!relativeOrAbsoluteUrl || !isValidProxyUrl(relativeOrAbsoluteUrl) || !isProxyUrlRelative(relativeOrAbsoluteUrl)) {\n    return relativeOrAbsoluteUrl;\n  }\n  return new URL(relativeOrAbsoluteUrl, baseUrl).toString();\n};\n\nconst satelliteAndMissingProxyUrlAndDomain =\n  'Missing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl';\nconst satelliteAndMissingSignInUrl = `\nInvalid signInUrl. A satellite application requires a signInUrl for development instances.\nCheck if signInUrl is missing from your configuration or if it is not an absolute URL.`;\n","import { isTruthy } from '@clerk/shared/underscore';\nimport type { IncomingMessage, ServerResponse } from 'http';\n\n// https://nextjs.org/docs/api-routes/api-middlewares#connectexpress-middleware-support\nexport function runMiddleware(req: IncomingMessage, res: ServerResponse, fn: (...args: any) => any) {\n  return new Promise((resolve, reject) => {\n    // @ts-ignore\n    void fn(req, res, result => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n      return resolve(result);\n    });\n  });\n}\n\nexport const loadClientEnv = () => {\n  return {\n    publishableKey: process.env.CLERK_PUBLISHABLE_KEY || '',\n    clerkJSUrl: process.env.CLERK_JS || '',\n    clerkJSVersion: process.env.CLERK_JS_VERSION || '',\n  };\n};\n\nexport const loadApiEnv = () => {\n  return {\n    secretKey: process.env.CLERK_SECRET_KEY || '',\n    apiUrl: process.env.CLERK_API_URL || 'https://api.clerk.com',\n    apiVersion: process.env.CLERK_API_VERSION || 'v1',\n    domain: process.env.CLERK_DOMAIN || '',\n    proxyUrl: process.env.CLERK_PROXY_URL || '',\n    signInUrl: process.env.CLERK_SIGN_IN_URL || '',\n    isSatellite: isTruthy(process.env.CLERK_IS_SATELLITE),\n    jwtKey: process.env.CLERK_JWT_KEY || '',\n    sdkMetadata: {\n      name: PACKAGE_NAME,\n      version: PACKAGE_VERSION,\n      environment: process.env.NODE_ENV,\n    },\n  };\n};\n","import type { createClerkClient } from '@clerk/backend';\nimport type { RequestState } from '@clerk/backend/internal';\n\nimport { authenticateRequest, setResponseHeaders } from './authenticateRequest';\nimport type { ClerkMiddlewareOptions, MiddlewareRequireAuthProp, RequireAuthProp } from './types';\n\nexport type CreateClerkExpressMiddlewareOptions = {\n  clerkClient: ReturnType<typeof createClerkClient>;\n  secretKey?: string;\n  publishableKey?: string;\n  apiUrl?: string;\n};\n\nexport const createClerkExpressRequireAuth = (createOpts: CreateClerkExpressMiddlewareOptions) => {\n  const { clerkClient, secretKey = '', publishableKey = '' } = createOpts;\n\n  return (options: ClerkMiddlewareOptions = {}): MiddlewareRequireAuthProp => {\n    return async (req, res, next) => {\n      let requestState: RequestState;\n\n      try {\n        requestState = await authenticateRequest({\n          clerkClient,\n          secretKey,\n          publishableKey,\n          req,\n          options,\n        });\n      } catch (e) {\n        next(e);\n        return;\n      }\n\n      const err = setResponseHeaders(requestState, res);\n      if (err || res.writableEnded) {\n        if (err) {\n          next(err);\n        }\n        return;\n      }\n\n      if (requestState.isSignedIn) {\n        (req as RequireAuthProp<any>).auth = { ...requestState.toAuth(), claims: requestState.toAuth().sessionClaims };\n        next();\n        return;\n      }\n\n      next(new Error('Unauthenticated'));\n    };\n  };\n};\n","import type { RequestState } from '@clerk/backend/internal';\n\nimport { authenticateRequest, setResponseHeaders } from './authenticateRequest';\nimport type { CreateClerkExpressMiddlewareOptions } from './clerkExpressRequireAuth';\nimport type { ClerkMiddlewareOptions, MiddlewareWithAuthProp, WithAuthProp } from './types';\n\nexport const createClerkExpressWithAuth = (createOpts: CreateClerkExpressMiddlewareOptions) => {\n  const { clerkClient, secretKey = '', publishableKey = '' } = createOpts;\n  return (options: ClerkMiddlewareOptions = {}): MiddlewareWithAuthProp => {\n    return async (req, res, next) => {\n      let requestState: RequestState;\n\n      try {\n        requestState = await authenticateRequest({\n          clerkClient,\n          secretKey,\n          publishableKey,\n          req,\n          options,\n        });\n      } catch (e) {\n        next(e);\n        return;\n      }\n\n      const err = setResponseHeaders(requestState, res);\n      if (err || res.writableEnded) {\n        if (err) {\n          next(err);\n        }\n        return;\n      }\n\n      (req as WithAuthProp<any>).auth = {\n        ...requestState.toAuth(),\n        claims: requestState.toAuth()?.sessionClaims,\n      };\n      next();\n    };\n  };\n};\n","import { clerkClient, ClerkExpressRequireAuth, ClerkExpressWithAuth, createClerkClient } from './clerkClient';\nimport { createClerkExpressRequireAuth } from './clerkExpressRequireAuth';\nimport { createClerkExpressWithAuth } from './clerkExpressWithAuth';\nimport type {\n  ClerkMiddleware,\n  ClerkMiddlewareOptions,\n  LooseAuthProp,\n  RequireAuthProp,\n  StrictAuthProp,\n  WithAuthProp,\n} from './types';\n\nexport * from '@clerk/backend';\n/**\n * The order of these exports is important, as we want Clerk from clerk/clerk-sdk-node\n * to shadow the Clerk export from clerk/backend, because it needs to support\n * 2 additional apis: clerk.expressWithAuth, clerk.expressRequireAuth\n */\nexport { clerkClient, ClerkExpressRequireAuth, ClerkExpressWithAuth, createClerkClient };\n\nexport type { ClerkMiddleware, ClerkMiddlewareOptions, LooseAuthProp, RequireAuthProp, StrictAuthProp, WithAuthProp };\n\nexport { createClerkExpressRequireAuth, createClerkExpressWithAuth };\n\nexport { requireAuth } from './requireAuth';\nexport { withAuth } from './withAuth';\n","import type { Request, Response } from 'express';\n\nimport { clerkClient } from './clerkClient';\nimport { createClerkExpressRequireAuth } from './clerkExpressRequireAuth';\nimport type { ClerkMiddlewareOptions, RequireAuthProp } from './types';\nimport { runMiddleware } from './utils';\n\ntype ExpressApiHandlerRequireAuth<T = any> = (req: RequireAuthProp<Request>, res: Response<T>) => void | Promise<void>;\n\nexport function requireAuth(handler: ExpressApiHandlerRequireAuth, options?: ClerkMiddlewareOptions): any {\n  return async (req: Request, res: Response) => {\n    await runMiddleware(req, res, createClerkExpressRequireAuth({ clerkClient })(options));\n\n    return handler(req as RequireAuthProp<Request>, res);\n  };\n}\n","import type { Request, Response } from 'express';\n\nimport { clerkClient } from './clerkClient';\nimport { createClerkExpressWithAuth } from './clerkExpressWithAuth';\nimport type { ClerkMiddlewareOptions, WithAuthProp } from './types';\nimport { runMiddleware } from './utils';\n\ntype ApiHandlerWithAuth<TRequest, TResponse> = (req: WithAuthProp<TRequest>, res: TResponse) => void | Promise<void>;\n\n// TODO: drop the Request/Response default values in v5 version\nexport function withAuth<TRequest extends Request = Request, TResponse extends Response = Response>(\n  handler: ApiHandlerWithAuth<TRequest, TResponse>,\n  options?: ClerkMiddlewareOptions,\n): any {\n  return async (req: TRequest, res: TResponse) => {\n    await runMiddleware(req, res, createClerkExpressWithAuth({ clerkClient })(options));\n\n    return handler(req as WithAuthProp<TRequest>, res);\n  };\n}\n"],"mappings":"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","names":["clerkClient","clerkClient","clerkClient","clerkClient"]}